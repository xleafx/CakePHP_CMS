<?php

namespace App\Controller;

use App\Controller\AppController;
use Cake\Controller\Controller;
use Cake\ORM\Query;

class ArticlesController extends AppController
{

    public $helpers = ['CkEditor.Ck'];

    public function initialize()
    {
        parent::initialize();
        $this->loadComponent('Upload');
    }

    public function index()
    {
        $this->loadComponent('Paginator');
        $articles = $this->Paginator->paginate($this->Articles->find());
        $this->set(compact('articles'));
    }

    public function view($slug=null)
    {
        $article = $this->Articles->findBySlug($slug)->firstOrFail();
        $this->set(compact('article'));
    }

    public function add()
    {
        $article = $this->Articles->newEntity();
        if ($this->request->is('post')) {
            $article = $this->Articles->patchEntity($article, $this->request->getData());
            $article->user_id = $this->Auth->user('id');
            if ($this->Articles->save($article)) {
                $this->Flash->success(__('Your article has been saved.'));
                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('Unable to add your article.'));

            $image = $this->request->getData()['articles']['image'];
            if(isset($image['name']) && !empty($image["name"])){
                $this->Upload->upload($image);

                if($this->Upload->uploaded) {
                    $name=md5(time());
                    $this->Upload->file_new_name_body = $name;
                    $this->Upload->process('/upload/articles/');
                    $profileImage = $this->Upload->file_dst_name;

                    $article->articles->image = $profileImage;
                }
            } else {
                unset($this->request->getData()['articles']['image']);
            }
        }

        $tags = $this->Articles->Tags->find('list');
        $this->set('tags', $tags);
        $this->set('article', $article);

//        $categories = $this->Articles->Categories->find('treeList');
//        $this->set(compact('categories'));
    }

    public function edit($slug)
    {
        $article = $this->Articles->findBySlug($slug)->firstOrFail();
        if ($this->request->is(['post', 'put'])) {
            $this->Articles->patchEntity($article, $this->request->getData());
            if ($this->Articles->save($article)) {
                $this->Flash->success(__('Your article has been updated.'));
                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('Unable to update your article.'));
        }
        // Get a list of tags.
        $tags = $this->Articles->Tags->find('list');

        // Set tags to the view context
        $this->set('tags', $tags);

        $this->set('article', $article);
    }

    public function delete($slug)
    {
        $this->request->allowMethod(['post', 'delete']);
        $article = $this->Articles->findBySlug($slug)->firstOrFail();
        if ($this->Articles->delete($article)) {
            $this->Flash->success(__('The {0} article has been deleted.', $article->title));
            return $this->redirect(['action' => 'index']);
        }
    }

    public function tags(...$tags)
    {
//        $tags = $this->request->getParam('pass');
        // Use the ArticlesTable to find tagged articles.
        $articles = $this->Articles->find('tagged', [
            'tags' => $tags
        ]);
        // Pass variables into the view template context.
        $this->set([
            'articles' => $articles,
            'tags' => $tags
        ]);
    }


    /**
     * @param $user
     * @return bool
     */
    public function isAuthorized($user)
    {
        if ($this->request->getParam('action') === 'add') {
            return true;
        }

        if (in_array($this->request->getParam('action'), ['edit', 'delete'])) {
            $articleId = (int)$this->request->getParam('pass.0');
            if ($this->Articles->isOwnedBy($articleId, $user['id'])){
                return true;
            }
        }

        return parent::isAuthorized(); // TODO: Change the autogenerated stub
    }

//    public function image() {
//        if (!empty($this->request->getData())) {
//            if (!empty($this->request->getData()['upload']['image'])) {
//                $file = $this->request->getData()['upload']; //put the data into a var for easy use
//
//                $ext = substr(strtolower(strrchr($file['image'], '.')), 1);
//                $arr_ext = ['jpg', 'jpeg', 'gif', 'png'];
//                $setNewFileName = time() . "_" . rand(000000, 999999);
//
//                //only process if the extension is valid
//                if (in_array($ext, $arr_ext)) {
//                    //do the actual uploading of the file. First arg is the tmp name, second arg is
//                    //where we are putting it
//                    move_uploaded_file($file['image'], WWW_ROOT . '/upload/articles/' . $setNewFileName . '.' . $ext);
//
//                    $imageFileName = $setNewFileName . '.' . $ext;
//                }
//            }
//
//            $getFormvalue = $this->Articles->patchEntity($this->request->getData());
//
//            if (!empty($this->request->getData()['upload']['image'])) {
//                $getFormvalue->image = $imageFileName;
//            }
//
//
//            if ($this->Articles->save($getFormvalue)) {
//                $this->Flash->success('Post has been sucessfully updated.');
//                return $this->redirect(['controller' => 'Articles', 'action' => 'index']);
//            } else {
//                $this->Flash->error('Records not be saved. Please, try again.');
//            }
//        }
//    }

}
